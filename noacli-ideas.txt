noacli -- no ampersand asynchronous shell

o  started, partial implementation
*  done
!/ next
E  buggy
x  not supported in Qt
n  decided to not implement this
D  documented feature (in Readme.md)
d  documented internally (doc settings doc)
t  documented internally with tool tip

User interface questions: (please send feedback!!)
o  Should all the tables be respaced with resizeRowsToContents()
   Is column selection between tableviewer and column picker awkward
   is the documentation unclear or too wordy
   is a keybindings viewer / editor needed
   are the options named well
o  should the window auto-resize theshold be a setting
   is it annoying that history scrolls to bottom and resets sort order
     when a command is run
     when history items are copied from the docs
*  when history wraps it should clear instead of immediately wrapping
   favorites changes
     separate button(checkbox) and name
     autocheck button if name is filled in, uncheck if blanked
     
Things to implement soon:
 * tableview sort
 *    proxy model
 *    reset in corner
      filter
   settingsDialog needs doubleclick resize
   context menu in history headers (h and v)
   cd should parse ~
   realign general settings editor to be callable from other apps
 x table should send stderr to log
   table column picker needs an undo select columns
   tableview: use column for vertical headers
   fix command parser to use built environment setting (XXXX marked)

high priority bugs
 ! table: use command line parser on real command line
 ! qtail: ? accept real command line options in shell from simpleargs
 * log prefix is being eaten twice by parser "tail tail" doesn't work
   mac bugs
     history arrows don't work on mac
     icons and app name don't work on mac (wrong geom?)
 ! settings apply button is delayed until ok pressed
      fix this or delete the button
   qtail should resize on smalldup of dead proc
 ? fileDialog doesn't always trim prefix correctly
   (test) does anything special need to be done to close/kill Table/qtail file?
   check all except: to not overcapture
   fix error message passing from tableviewer and qtail to be more visible
      status bar message?
      smalloutput message
      dialog box
      
Misc things to implement
   SETTING auto pause qtail on maxlines threshold
   table search
 ? table manual partitioning (when auto goes wrong)
 * qtail button mode
 *    watch vs. transient
 *    rerun vs. close
 *    automatic reload checkbox
d*    rerun interval
      file doesn't need autorefresh?? or should it clear(); seek(0)
 ? built in commands should get marked done in history
   close stdin
   add small buttons in dock widget headers
     jobs: clean
     history: reset sort
D*   alternately: document table corner button that does this
   qtail: translate terminal colors (for git diff)
   sync should load missing geom settings
 * tag name of button template for window title
     hidden text?
     leave out of history & job view (or copy to title)
   timestamps
     by option
     qtail?
     job manager
   shortcuts for internal actions
   detach processes before exiting (optionally)
d* SETTING: delay after first data before initial window resize
 o SETTING: max qtail window size (in px), to allow free expansion
 x add another kill button:  stop(2) terminate kill
   context->add new env  should move cursor (and scroll to) supplied item (even if it already exists)
 o history context menu: set vert spacing: expand vs minimum
     context menu -> reset to default height
   qtail on files directly in shell
 o history view row height
     autosize rows if they would be smaller
     reset to default on corner button?
   menu item
     close all windows
     kill all subprocesses
     disown all subprocesses (default on exit?)
 * if output windows are not visible, add extra status to main window?

User visible bugs:
   on large data, qtail freezes on first resize in qt adust()
     skip or postpone while busy?
     resize early when buffer is small rather than later
   command buttons can be broken by setwrap (more testing needed)
   duplicate key bindings don't get background paint until dialog is reopened
 * empty dock bug
 *   qt bug -- work around applied and commented
     test in U20
 * favorites editor bugs
DE    should warn on duplicate names? (color?)
x!so  block tostop signal : try os.setsid ?
     detect child proc trying to read stdin/stderr
     kill child proc?
     move to terminal window automatically?
     preconnect pty for this purpose?
   qtail gives useless errors on file not found
   bind hitory context menu to history headers too
   flowlayout overlapping buttons (rare? one time glitch?)

Bugs:
   have_error not propagating (free after emit? try delete later?)
   test sibling markers
 o font changes
 o   save font settings in settings
 *   live font selection
 n   application font
 o   create styled item delegate for QFont
        doesn't cancel correctly
	displayed fontname is ugly
   fonts are handed as objects to QSettings, save as font name later?
 ? 'type' builtin fails on old python (fix untested)
   tableviewer doesn't work on files or stdin
   reload button should change for pipes
 ? what to do with stderr? always log?
   lots of stuff packed into class noacli that could go elsewhere
 ? make file dialog not modal
     file dialog could temp insert icon in buffer where it will drop names
     insert icon=self.style().standardIcon(QStyle.SP_FileDialogStart)
   Poor data flow between jobItem and smallOutput (refactor)
   'set max' too often -- use histiresis of mul+1 ?
   file dialog cwd filter breaks in python 3.8 (work around in place)
   realign splitlines chars with our endline chars
     replace in text at decode?
     replace splitlines with re.compile / split(re)
     replace lineEnds with _PyUnicode_IsLinebreak
      https://hg.python.org/cpython/file/94f7cdab9f71/Objects/unicodetype_db.h#l3316
      https://stackoverflow.com/questions/24453713/python-string-splitlines-removes-certain-unicode-control-characters

D* small output window
D*   transfer last command output to qtail if:
D*     output exceeds visible lines-1
       process exit timeout
D*     another command is run that produces output
D*     user presses dup button (or shortcut?)
D*   single line (or most recent?) output sent to status bar
d*   don't remember more than visisible lines * 2 (option setting?)
D*   auto
 o   configured only (default qtail)
 o   forced (disable auto-qtail)

D* merged logs window
     count unviewed messages and show counter in status bar and menu
 n?  send some messages also to small output window
  	if sow is visible and log is not
  	if newly started program exits before next command
  	if exit value is nonzero
  	blacklist list
  	whitelist ?
 x   filter by pid, process name, random string
 *   purge by ^^
D*   max retention

   command parser fd redirection
     prefix or suffix for output dest
       stdout:stderr
       > @qtail  2>@qtail
       default qtail:log
     handle |  --> tree
     handle <
     handle >
     set window title based on regex filter list
   update status bar with recent process status and errors
 * short output in status window
 * single lines to status bar (and status window?)

 * job manager and history:
 *   scroll to new entry
 *   resize columns

 context menu / widget / class
 * history manager / historyView
 * job manager / jobTableVew / noacli
   button editor / settingsDialog>tableView / settingsDialog
 * general settings editor / settingsDialog>tableView / settingsDialog
 * command window / plainTextEdit / commandEditor
   qtail search / searchTerm / QtTail?
 * log dock

 Main features:
 * main window is a dynamic one line editor
     pwd in message window when nothing else
     directory stack
D*   complex commands are sent to bash
       detect complex commands
 *   command window context menu
 *     run
 *     save for later and clear
 *     clear?
 *     save to favorites
 o   Qsettings
D*      save/restore geometry (QWidget)
D*        save multiple profiles
 *      save/restore history?
 o      read history on command
 *	save env changes?
     docks* and +dialogs?  (%hash @array)
       dock: QT data structure is persistent and master
       dialog: build a table on the fly and save changes
D*      *@ history
D*      *% button dock
D*      *? job manager
D*      *@ favorites editor (buttons and frequent)
D*	o% environment var editor
D*      *% settings editor
  	 % wrapper editor
  	 % command default mode editor
 	     table: command mode
 	     mode: qtail log terminal null local graph (default: pulldown)
  	 @ ssh manager
D*	 @ fancy table viewer
 	 @ ulimits editor
 	 % internal function keybindings
D* history with arrow keys
 n history search with ctrl-s ctrl-r and !?
D* history with pull down menu (last 10)
D* history manager
D*   table: index frequency exitval command button-name checkbox:edit/run
D*   editable table --> double click to edit in main window
D*   exit value: none if never run; color green/red/grey
D*   allow re-edits of unrun entries
        move to end of list
D*   sortable table (by col)
D*   search box --> filter
 *   sort: history order (col=-1)
 *   context menu
 n remember 10 most frequent commands in pull down menu
D* button editor ("favorites")
     right click context menu
 ?      edit in larger window (or just stretch the cell)
 	ui.tableView.resizerowsToContents
     add Settings save menu item somewhere
 *   table: *name *key count *command *checkImmediate
 *   sorted sections: buttons freq
     make sortable with proxy
       and searchable?
       reset sort
D*   implement key shortcuts
D*   mark edited lines and save? or just mark to keep or expire
 * history manager context menu
 *   (single click copies to edit window, double click runs)
 *   add to favorites
 *   delete selected
 *   remove duplicates
Do job manager list
 *   manager table: pid type command kill raise? info rerun
 *   alternate: QProcess object, status, type, command
 *   window status
 *   window type
D*   click to redisplay / raise window (qtail)
 o   job manager context menu:
 x     info? --> process status, time stats, etc
 *     kill
 n     edit
 n     kill or kill and restart
 *     raise or reopen
 *     close window
       measure output
 n     clone?
 n   open status icon
 *   proc/wait info
D*   delete dead jobs? (life cycle)
 n   change default type
   pipe / fd / job
     handle stdout
       stderr channels separately
       save to file
       can a process in the middle of a pipeline be restarted?
     handle stdin:
       send file
       pipe  (connect multiple commands, tree style jobs)
 ?     close when not used
D* settings
 *   table: name default tooltip currentval
D*   show default in table ? or unmark when set to default?
 n   context menu: reset selected to default
 *   merge qtail options
     items
d*     historysize
d*     historyfile
d*     histfilesize
 n     histcontrol
 n       ignorespace : don't remember commands starting with space
d*       ignoredups: ignore repeated commands
d*       erasedups: remove previous occurances from history
d*     JobMenuWidth
d*     history menu size
d*     frequent menu size
d*     frequents size
 n     frequents threshold
d*     SHELL external shell
d      graphical terminal
 n     QTailFormat
d      QTailFollow
d?     QTailWrap
d      QTailSearchMode
d      QTailCaseInsensitive

 * environment vars?
 *   key : [ mode. value ]
 *   mode = inherited, session, save, deleted, mask
 *   tooltips:
 *     inherit: inherited from external environment
 *     session: keep these changes for this session only
 *     save: changes saved for future sessions
 *     deleted: will not be used for subprocesses
 *     mask: will be masked from use in this and future sessions
 *   inherit -> reset value from env
 *   mod value -> (delete,inherit)->session or mask->save
 *   new key -> save
     mark changed values

Do wrapper table
 o   name : [ save, OutWin, args... ]
     load from file
     save to file

 * short output commands -- display last line in editor/launcher

 o terminal (find one in python?)
D* qtail window
D* merged log viewer
D* table parser window
   iconified -- status from proc
   special -- parsed status
     pie chart for percentages / apt interaction
     debconf-apt-progress progress bar protocol
D* ephemeral -- autoclose

Do scrolly window (qtail)
D*   view / follow a log file
D*   take input from a pipe
DE   keep only last X lines? (initial input overload)
 *   autoresize (need trigger event)
     in a file, button to backscroll to previous lines or read more forward
	large file handling, line number / fseek index
     pause (pull down menu) disable input / change button
 *   start from top / follow tail
 o   reload button
 *     if file --> reload
 *     if process / running command -> kill
       if done command -> rerun
 /     if open stdin -> stop (close)
 /     if closed -> close window
     autoclose after exit on specified timeout without user interaction
     command line options (for inside noacli)
       --file
       --maxlines ?Z
D*   search / filter ?
     search context menu
Do     find next
       find previous
       find forward / reverse
       case sensitive SETTING
       regex / plain SETTING
       advanced --> find dialog
     menu bar
       file
	 open: new / command / reopen/refresh / rerun / reopen file in other app
	 save as
	 buffering: tail [size] / all
	 format/view
 **x       plain text html markdown
 o 	   alternate fonts
 o     memory saver (limit scrollback to 1M / 10000 lines by default)
       find menu
	 advanced --> find dialog
 *       wrap?
	 bookmarks
       find dialog
	 buttons: next prev hilight/unhilight
	 regex / glob / plain ?
 o       ignore case (default only for now)
 x       mark scrollbar with finds (set color for multiple finds?)
 x       save search & color as preset
 x       trigger sets of presets based on command name
 x       run command on current selection?
     text body context menu
 x     change format (reloads text)
 *     transform selection to table
 *     adjustSize() --> autoresize window?
     command line options / open menu (menu bar)
 *     source from stdin
 *     file


 o log viewer
 *    saves to a log, either file or short memory buffer
 *    buffer size = bytes and/or time or lines
 *    log format:
 *      START $pid command
 *      $pid output line
 *x     EXIT $pid $exitval wait stats...
 x    view full or filtered log
        fold filtered entries


   status icon? from logged job?

D* simple output window
D*   for commands that output a small amount and exit in a short time
 *   rerun / close / clone / save
     pulldown: run this command with mode <> next time
     pulldown: (shared) / dedicated / clone / timeout (set as default for this cmd)

 * table viewer
 *   select lines, cells, columns, send to clipboard
 *   show / hide / rearrange columns
     sort by column
 *   table column selector
 *     select fields in list -- list view?
 *     export selected column names --> space or comma sep
 o   context menu
 *     merge selected cells in this row
       (split cell here)
     command line options
       --skip N lines
       --file
       --csv --delimiter
       --regex (delimiter or split pattern? depends on if groups?)
       --fixed --gap=2

   built in special commands
D*   terminal (--set-default)
D*   scrolly / qtail / tail
D*   log
D*   direct run / sh wrapper
     table
     parse and display graphically (chart, table, pie? matplotlib?)
Do   (feature) name completion
 *   host (setwrap) (similar to cd) --> send commands to ssh
 	use remote stub?
  	pty password mode for sudo?
 o   button --> adds a button for the following command
     pushd dir --> creates button fur current directory and cd
     pushd * --> creates buttons for all listed directories

   bash built in commands by category
   shared with noacli marked with *=command !=grpahical or ?=future
   misc (1/1)
     command*
   environment settings (6/13)
     cd* dirs export! hash logout exit popd pushd pwd times? type*
     ulimit? umask?
   shell settings (4.5/9)
     source alias bind!? builtin* readonly set! shopt! unalias unset
   user interface settings
     compgen complete compopt
   job control (3/8)
     bg disown? exec fg jobs! kill! suspend wait
   history (2/2)
     fc! history!
   scripting (0/19)
     break caller continue declare typeset echo enable eval getopts
     let local mapfile printf read readarray return shift test trap


   folded sections
     fold selected region
     unfold icon
     fold converted table
     send selection to to tableviewer?

   built in standard commands to implement
     commands for module
       source ?
       export

   commands to implement as graphical functionality
 x   disown --> disconnect job (context menu?)
     times or other process stats (context menu, infobox, graph)
     ulimit umask (settings dialog)
     key bindings for builtin functions

   questional built in commands -- or gui eqivs
 *   set / shopt / unset
 n   hash / type --> performance needed??
 *   jobs history --> pop up window?
     pushd popd dirs / dirstack --> use buttons instead?
     alias / unalias
 *   kill
 n   exit
     ulimit
     umask
     bind (key)
D*   help
     times

   handle .desktop files, prepopulate graphical applications from those
     ignore everything not Type=Application
     look for ^Exec=
     look for Terminal=true
     ignore everything NoDisplay=true

   fancy environment variable editor
     split on delimiter, default :
     turn into checkbox list
     allow dragging
     context menu
       select all/none
       remove duplicates
       sort

   hide toolbar if window is too small (>1/3 ?)
     log viewer
     history
     on resize
     on top level change

 * command parser implementation
 *   strip matching first word
 *     output mode
D*       log
D*	 qtail/tail
D*	 small
 	 table (qtail with options?)
 *     built in commands -> parse rest in subfunction
D*       cd
 	 pwd?
 	 pushd popd
D*     wrapper aliases
D*       direct  -> word split and run without wrapper
D*	 sh/bash -> bash -c
D*	 term -> "xterm -e" or "gnome-terminal --"
  	 $hostname -> ssh -n (-M -P 6h) $hostname
       regex match? (macro?)

   regex matches
     output and input separately scanned for regex matches
     grouped matches are saved to match variables
     match variabes can substitute into command templates
     store match dictionary in jobinfo?
     context menu items to use match dictionary
       set title (or set automatically)
       regex menu items that only show if dependencies met

     can a command template auto trigger on output match?
        run or just insert into edit buffer?
	small output window only?
	enable special one shot output match from command match trigger

   button box dock ideas
     right click: dump in editor
     draggable gridview ??
 *   replace gridlayout with (custom) pilelayout or flowlayout
     reimplement compact button bar GUI and make its own checkbox
     option to choose between QToolButton and QPushButton
 *   non-immediate button: marker to move cursor
     change immediate button to pulldown in editor
       run immediate
       clear and edit
       insert
     context menu:
       Alternate layouts:
	 greedy layout
 	 alphebetize
 	 draggable / user order
 	 include static buttons in order?
 o     refit / expand to fit
       simulated anealing rearrange / fit
     make button order editable by dragging buttons
     context menu for button
       delete
       run?
       copy to editor
       insert into editor

   regex match stuff
     scan input and output with a list of regex
     save named groups in a dictionary
     use dictionary format() style for command templates
     possibly trigger rules
     rule actions:
       (de)activate other regex
       internal slots
         set title
       	 special: ssh setsid?
 	 change view dest options
	 GUI indicator change?? dialog message?
	 open / bring to top output window
     dictionary value dock
       edit values
       delete values
       watch rules --> trigger action on value match/change
   regex on commands
     aliases
     ssh -> setsid
     ssh, man -> set title
   regex on output
     sbatch -> tail

   ssh manager
     run ssh -O check before trying a wrapper?
     even if nothing directly is implemented, document the below
     xterm -e  ssh -fnN  {}
     config (-o 'key val' )
       ControlMaster auto (-M ?)
       ControlPath ~/.ssh/socket.%h.%p.%r  (-S)
       setsid ssh
       #ControlPersist 6h (yes | 0 )
       ## close with ssh -O check (forward cancel) stop exit

   Possible internal actions for shortcut keys
     save favorites
     sync settings
     switch to profile ...
     show all / hide all /tabify all docks
     show/hide dock X
     run
     run last command
     clear command
     history up
     history down
     restore current geometry
     small dup
     small log
     small kill

   man page viewer
     qtail base
     fixed with font?
     regex replace cross references with links
     links trigger reading other man pages
     database
       detect new pages since last init / newly installed pages
       cross reference tree
       timestamp of last time a page is read
       pick a random not-recent page
       pages by families?
       side bar / dock of (recent, related) man pages
       sort list by
	 time
	 relation depth
	 alphabetically
	 section, then alpha
	 num similar letters
       search by
         apropos
	 read (on,before,after) date
	 related
	 filter by section
        clear database

completed misc. features
 * table parsing in qtail
 *    fixed width white space tables
 * add title to jobinfo and use it when small output dup
 *  button should set title from button name
 o job life cycle
 *   delete job if command is done and window is closed
 *   timeout if no window?
 * command edit should grab focus after accepting input
 * job: double click connect to send command to editor
 *   connect to qtail window status
 * tables: implement vertical headers??
 *   make corner button clickable to reset sort column to -1
 * qtail: resize after visible? or after first read
 * change Qsettings to use sections
 *   only read general settings for settings dialog
 *   move favorites to its own section
D*   save window position profiles in a section
D* look at cursor and set file dialog filter
 * delete QSettings that match defaults
 * at start, send version to smalloutput
?* job pull down menu should also raise window
 x Job and history view: WordWrapMode = WrapWordsOrAnywhere (not supported)
D* file dialog: disable path prefix stripping without changing start dir
 * built in command output should go to small window (too)
 * log window pause / resume process (context)
 * print exit value if keep is false
 x small output: replace horiz rule image; scale image to fit box
 * add running indicator to small output (kill and log buttons)
 * small output title counter
D* doubleclick on favorites editor headers to resize row
D* automatic $SHELL wrappers
 * save wrappers
 * qtail: set extra selections for previously found items (clear when?)
D* if text is selected before pushing template button, save it and paste over mark
D* qtail: bind ctrl-f to focus on search box
 x qtail: resize on zoom?
 * dock autoresize if scrollbar on topLevelChanged(floating==true)
D* tooltips on buttons --> command
 * make template buttons distinctive
 *   immediate buttons are bold
 *   template buttons are italic
 * job manager should resize rows vertically in context menu
 * qtail checkbox to hide toolbar
 * qtail primary and secondary fonts
 * small output context --> clear
D* filedialog prefix '" causes all filenames to be quoted

fixed bugs
 * retore geometry doesn't grab the current selected geometry
 * history save bug with newline prefix
d* log window needs a threshold LogBatchLines = 5?
D* change pick file behavior (without conditions here)
 *   if prefix starts with / and contains no * treat as intial cwd and strip
D*   if it ends in / select dirs only??
 n   maybe output dir/{} syntax (this is just too clever for its own good)
 * add tooltips to favorites editor command
 * scroll job manager to bottom on new job?
 * qtail main window doesn't autoresize even when it has horiz scrollbar
 * small output size not set at start if not visible
 * job manager column view width issues
 *   fix with corner reset button
 ?   use header double click to resize
 * tableviewer: number blank cols too
 * resize history to fit window at start (scroll bar bug, only when tiny)
 *   make sure tableview is resized to fit
 *     at start
 *     when dock is popped out or resized
 *   corner button resets width
 * QSortFilterProxyModel: index from wrong model passed to mapFromSource
 * when a dock is pulled out, check if it has scrollbars and resize
 *    dock: resize? on topLevelChanged (float/nofloat)
 * default geometry profile used but not checked at start (use setChecked)
 * make sure autorefresh timer is canceled when window is closed
 * fix qtail buffering (fixed for large blocks and stdin)
 * qtail doesn't detect eof on stdin or pipe
 * qtail follow broken for pipe? and file --> check socket
 * qtail is slow reading large files
 *   read in smaller chunks
 n   use cursor.beginEditBlock / endEditBlock (read single block instead)
 * fixed format fence post with slurm 1 char margins  sacct -a -X
 *   trim results?
 * tableviewer triggers race condition in betterIO.peek
 *    maybe write a custom buffer class that handles async I/O and readLine properly
 * all input processors choke on bad unicode? (, errors='backslashreplace')
 * gets middle of file on /usr/dict/words without --whole
 * file dialog doesn't strip paths correctly for python <= 3.8 (3.6?)
 * qtail doesn't detect file not found and keeps trying
 * table: IsADirectoryError: [Errno 21] Is a directory: 'junk' 418/openfile
 * table: FileNotFoundError: 418/openfile

