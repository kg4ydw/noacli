noacli -- no ampersand asynchronous shell

o  started, partial implementation
*  done
!/ next
E  buggy
-  gui implelemented, no code
x  not supported in Qt
D  documented feature (in Readme.md)
d  documented internally (doc settings doc)
t  documented internally with tool tip

Things to implement soon:
   built in commands should get marked done in history
   built in command output should go to small window (too)
 * log window pause / resume process (context)
 E log window flush process (context) doesn't work
   qtail: set extra selections for previously found items (clear when?)
 * print exit value if keep is false
 o table parsing in qtail
      fixed width white space tables
 o add title to jobinfo and use it when small output dup
 ? close stdin
 o job life cycle
 *   delete job if command is done and window is closed
     timeout if no window?
   small buttons in dock widget headers
     jobs: clean
     history: reset sort
 * resource manager (may undo this)
 *   noacli-res.qrc
D* if text is selected before pushing template button, save it and paste over mark
 x small output: replace horiz rule image; scale image to fit box
   qtail: bind ctrl-f to focus on search box
   qtail: translate terminal colors
 * tag name of button template for window title
     hidden text?
     leave out of history & job view (or copy to title)
   regex on commands
     aliases
     ssh -> setsid
     ssh, man -> set title
   regex on output
     sbatch -> tail
   timestamps
     by option
     qtail?
     job manager
 ! environment: implement saving settings
   shortcuts for internal actions
   detach processes before exiting (optionally)
 * add running indicator to small output (kill and log buttons)
 * history context menu: set vert spacing: expand vs minimum
   SETTING: delay after first data before initial window resize
   SETTING: max qtail window size
   add another kill button:  stop(2) terminate kill

User visible bugs:
   duplicate key bindings don't get background paint until dialog is reopened
   mac bugs
     history arrows don't work on mac
     icons and app name don't work on mac (wrong geom?)
 * favorites editor bugs
DE    should warn on duplicate names? (color?)
 *    fix editing command causing duplicate entries
x! block tostop signal : try os.setsid ?
     detect child proc trying to read stdin/stderr
     kill child proc?
     move to terminal window automatically?
     preconnect pty for this purpose?
   gets middle of file on /usr/dict/words without --whole
   qtail gives useless errors on file not found
 * favorites editor duplicates entries when you edit commands
 ! default geometry profile used but not checked at start (use setChecked)
   flowlayout overlapping buttons
   settings apply button is delayed until ok pressed
   resize history to fit window at start (scroll bar bug, only when tiny)
     make sure tableview is resized to fit
 ? history window table needs to be resized sometimes

Bugs:
   log flush context: doesn't do anything?
   qtail is slow reading large files
     read in smaller chunks
     use cursor.beginEditBlock / endEditBlock
   reload button should change for pipes
 ? what to do with stderr? always log?
   lots of stuff packed into class noacli that could go elsewhere
 ? make file dialog not modal
   dock: resize? on topLevelChanged (float/nofloat)
   when a dock is pulled out, check if it has scrollbars and resize
   Poor data flow between jobItem and smallOutput (refactor)
   'set max' too often -- use histiresis of mul+1 ?
   file dialog cwd filter breaks in python 3.8 (work around in place)
 o history stupid scroll: fix by removing horizontal scroll bar
   history and job views should probably reimplement sizeHint and use minExp

D* small output window
D*   transfer last command output to qtail if:
D*     output exceeds visible lines-1
       process exit timeout
D*     another command is run that produces output
D*     user presses dup button (or shortcut?)
D*   single line (or most recent?) output sent to status bar
 *   don't remember more than visisible lines * 2 (option setting?)
     option: disable small output window and send everything to qtail
 *     auto
       configured only (default qtail)
       forced (disable auto-qtail)

D* merged logs window
     count unviewed messages and show counter in status bar and menu
 n?  send some messages also to small output window
  	if sow is visible and log is not
  	if newly started program exits before next command
  	if exit value is nonzero
  	blacklist list
  	whitelist ?
 x   filter by pid, process name, random string
 *   purge by ^^
D*   max retention

   command parser fd redirection
     prefix or suffix for output dest
       stdout:stderr
       > @qtail  2>@qtail
       default qtail:log
     handle |  --> tree
     handle <
     handle >
     set window title based on regex filter list
   update status bar with recent process status and errors
 * short output in status window
 * single lines to status bar (and status window?)

 * job manager and history:
 *   scroll to new entry
 *   resize columns

 context menu / widget / class
 * history manager / historyView
 * job manager / jobTableVew / noacli
   button editor / settingsDialog>tableView / settingsDialog
   general settings editor / settingsDialog>tableView / settingsDialog
 * command window / plainTextEdit / commandEditor
   qtail search / searchTerm / QtTail?
 * log dock

 Main features:
 * main window is a dynamic one line editor
 !   pwd in message window when nothing else
     directory stack
D*   complex commands are sent to bash
       detect complex commands
 *   command window context menu
 *     run
 *     save for later and clear
 *     clear?
 *     save to favorites
 o   Qsettings
D*      save/restore geometry (QWidget)
D*        save multiple profiles
 *      save/restore history?
 o      read history on command
	save env changes?
     docks* and +dialogs?  (%hash @array)
       dock: QT data structure is persistent and master
       dialog: build a table on the fly and save changes
D*      *@ history
D*      *% button dock
D*      *? job manager
D*      *@ favorites editor (buttons and frequent)
Do	o% environment var editor
D*      *% settings editor
	 % wrapper editor
 !	!% command default mode editor
 	     table: command mode
 	     mode: qtail log terminal null local graph (default: pulldown)
	 @ ssh manager
	 @ fancy table viewer
	 @ ulimits editor
	 % internal function keybindings
D* history with arrow keys
   history search with ctrl-s ctrl-r and !?
D* history with pull down menu (last 10)
D* history manager
D*   table: index frequency exitval command button-name checkbox:edit/run
D*   editable table --> double click to edit in main window
D*   exit value: none if never run; color green/red/grey
D*   allow re-edits of unrun entries
        move to end of list
D*   sortable table (by col)
D*   search box --> filter
 *   sort: history order (col=-1)
 *   context menu
 n remember 10 most frequent commands in pull down menu
D* button editor ("favorites")
 !   right click -> edit in larger window
     add Settings save menu item somewhere
 *   table: *name *key count *command *checkImmediate
 *   sorted sections: buttons freq
     make sortable with proxy
       and searchable?
       reset sort
D*   implement key shortcuts
D*   mark edited lines and save? or just mark to keep or expire
 * history manager context menu
 *   (single click copies to edit window, double click runs)
 *   add to favorites
 *   delete selected
 *   remove duplicates
Do job manager list
 o   manager table: pid type command kill raise? info rerun
 *   alternate: QProcess object, status, type, command
 *   window status
     window type
D*   click to redisplay / raise window (qtail)
 o   job manager context menu:
       info? --> process status, time stats, etc
 *     kill
       edit
 n     kill or kill and restart
 *     raise or reopen
 *     close window
       measure output
 n     clone?
     open status icon
 *   proc/wait info
D*   delete dead jobs? (life cycle)
     change default type
   pipe / fd / job
     handle stdout
       stderr channels separately
       save to file
       can a process in the middle of a pipeline be restarted?
     handle stdin:
       send file
       pipe  (connect multiple commands, tree style jobs)
 ?     close when not used
Do settings
 *   table: name default tooltip currentval
D*   show default in table ? or unmark when set to default?
 !   context menu: reset selected to default
 *   merge qtail options
     items
d*     historysize
d*     historyfile
d*     histfilesize
 n     histcontrol
 n       ignorespace : don't remember commands starting with space
d*       ignoredups: ignore repeated commands
d*       erasedups: remove previous occurances from history
d*     JobMenuWidth
d*     history menu size
d*     frequent menu size
d*     frequents size
 n     frequents threshold
d!     SHELL external shell
d      graphical terminal
 n     QTailFormat
d      QTailFollow
d?     QTailWrap
d      QTailSearchMode
d      QTailCaseInsensitive

 o environment vars?
 o   key : [ mode. value ]
 !   mode = inherited, session, save, deleted, mask
     tooltips:
 *     inherit: inherited from external environment
 *     session: keep these changes for this session only
 !     save: changes saved for future sessions
 o     deleted: will not be used for subprocesses
 !     mask: will be masked from use in this and future sessions
     inherit -> reset value from env
     mod value -> (delete,inherit)->session or mask->save
     new key -> save
     mark changed values

Do wrapper table
 o   name : [ save, OutWin, args... ]
 !   load from file
 !   save to file

 * short output commands -- display last line in editor/launcher


 o terminal
D* qtail window
D* merged log viewer
 * table parser window
   iconified -- status from proc
   special -- parsed status
     pie chart for percentages / apt interaction
D* ephemeral -- autoclose

Do scrolly window
D*   view / follow a log file
D*   take input from a pipe
DE   keep only last X lines? (initial input overload)
 *   autoresize (need trigger event)
     in a file, button to backscroll to previous lines or read more forward
	large file handling, line number / fseek index
     pause (pull down menu) disable input / change button
 *   start from top / follow tail
 o   reload button
 *     if file --> reload
 *     if process / running command -> kill
       if done command -> rerun
 /     if open stdin -> stop (close)
 /     if closed -> close window
     autoclose after exit on specified timeout without user interaction
D*   search / filter ?
     search context menu
Do     find next
       find previous
       find forward / reverse
       case sensitive SETTING
       regex / plain SETTING
       advanced --> find dialog
     menu bar
       file
	 open: new / command / reopen/refresh / rerun / reopen file in other app
	 save as
	 buffering: tail [size] / all
	 format/view
 **x       plain text html markdown
 x         fixed width font
 o     memory saver (limit scrollback to 1M / 10000 lines by default)
       find menu
	 advanced --> find dialog
 *       wrap?
	 bookmarks
       find dialog
	 buttons: next prev hilight/unhilight
	 regex / glob / plain ?
 o       ignore case (default only for now)
 x       mark scrollbar with finds (set color for multiple finds?)
 x       save search & color as preset
 x       trigger sets of presets based on command name
 x       run command on current selection?
     text body context menu
 x     change format (reloads text)
 *     transform selection to table
 *     adjustSize() --> autoresize window?
     command line options / open menu (menu bar)
 *     source from stdin
 *     file


 o log
 *    saves to a log, either file or short memory buffer
 *    buffer size = bytes and/or time or lines
 *    log format:
 *      START $pid command
 *      $pid output line
 *x     EXIT $pid $exitval wait stats...
 x    view full or filtered log

   status icon? from logged job?

D* simple output window
D*   for commands that output a small amount and exit in a short time
 *   rerun / close / clone / save
     pulldown: run this command with mode <> next time
     pulldown: (shared) / dedicated / clone / timeout (set as default for this cmd)

   table viewer
     options: --delimiter
     select lines, cells, columns, send back to editor
     show / hide / rearrange columns
     sort by column
     table column selector
       select in list -- list view?
       copy selected column names --> space or comma sep

   built in special commands
D*   terminal (--set-default)
D*   scrolly / qtail / tail
D*   log
D*   direct run / sh wrapper
     table
     parse and display graphically (chart, table, pie? matplotlib?)
Do   (feature) name completion
 *   host (similar to cd) --> send commands to ssh
 *	use remote stub?
  	pty password mode for sudo?
 o   button --> adds a button for the following command
     pushd dir --> creates button fur current directory and cd
     pushd * --> creates buttons for all listed directories

   bash built in commands by category
   shared with noacli marked with *=command !=grpahical or ?=future
   misc (1/1)
     command*
   environment settings (6/13)
     cd* dirs export! hash logout exit popd pushd pwd times? type*
     ulimit? umask?
   shell settings (4.5/9)
     source alias bind!? builtin* readonly set! shopt! unalias unset
   user interface settings
     compgen complete compopt
   job control (3/8)
     bg disown? exec fg jobs! kill! suspend wait
   history (2/2)
     fc! history!
   scripting (0/19)
     break caller continue declare typeset echo enable eval getopts
     let local mapfile printf read readarray return shift test trap


   built in standard commands to implement
     commands for module
       source ?
       export

   commands to implement as graphical functionality
     disown --> disconnect job (context menu?)
     times or other process stats (context menu, infobox, graph)
     ulimit umask (settings dialog)
     key bindings for builtin functions

   questional built in commands -- or gui eqivs
 *   set / shopt / unset
 n   hash / type --> performance needed??
 *   jobs history --> pop up window?
     pushd popd dirs / dirstack --> use buttons instead?
     alias / unalias
 *   kill
 n   exit
     ulimit
     umask
     bind (key)
D*   help
     times

   handle .desktop files, prepopulate graphical applications from those
     ignore everything not Type=Application
     look for ^Exec=
     look for Terminal=true
     ignore everything NoDisplay=true

   fancy environment variable editor
     split on delimiter, default :
     turn into checkbox list
     allow dragging
     context menu
       select all/none
       remove duplicates
       sort

 * command parser implementation
 *   strip matching first word
 *     output mode
D*       log
D*	 qtail/tail
D*	 small
 	 table (qtail with options?)
 *     built in commands -> parse rest in subfunction
D*       cd
 	 pwd?
 	 pushd popd
D*     wrapper aliases
D*       direct  -> word split and run without wrapper
D*	 sh/bash -> bash -c
D*	 term -> "xterm -e" or "gnome-terminal --"
  	 $hostname -> ssh -n (-M -P 6h) $hostname
       regex match? (macro?)

   regex matches
     output and input separately scanned for regex matches
     grouped matches are saved to match variables
     match variabes can substitute into command templates

     can a command template auto trigger on output match?
        run or just insert into edit buffer?
	small output window only?
	enable special one shot output match from command match trigger

   button box dock ideas
     right click: dump in editor
     draggable gridview ??
 *   replace gridlayout with (custom) pilelayout or flowlayout
     reimplement compact button bar GUI and make its own checkbox
     option to choose between QToolButton and QPushButton
 *   non-immediate button: marker to move cursor
     change immediate button to pulldown in editor
       run immediate
       clear and edit
       insert
     context menu:
       Alternate layouts:
	 greedy layout
 	 alphebetize
 	 draggable / user order
 	 include static buttons in order?
 o     refit / expand to fit
       simulated anealing rearrange / fit
     make button order editable by dragging buttons
     context menu for button
       delete
       run?
       copy to editor
       insert into editor

   ssh manager
     xterm -e  ssh -fnN  {}
     config (-o 'key val' )
       ControlMaster auto (-M ?)
       ControlPath ~/.ssh/socket.%h.%p.%r  (-S)
       setsid ssh
       #ControlPersist 6h (yes | 0 )
       ## close with ssh -O check (forward cancel) stop exit

   Possible internal actions for shortcut keys
     save favorites
     sync settings
     switch to profile ...
     show all / hide all /tabify all docks
     show/hide dock X
     run
     run last command
     clear command
     history up
     history down
     restore current geometry
     small dup
     small log
     small kill

completed misc. features
 *  button should set title from button name
 * command edit should grab focus after accepting input
 * job: double click connect to send command to editor
 *   connect to qtail window status
 * tables: implement vertical headers??
 *   make corner button clickable to reset sort column to -1
 * qtail: resize after visible? or after first read
 * change Qsettings to use sections
 *   only read general settings for settings dialog
 *   move favorites to its own section
D*   save window position profiles in a section
D* look at cursor and set file dialog filter
 * delete QSettings that match defaults
 * at start, send version to smalloutput
?* job pull down menu should also raise window
 x Job and history view: WordWrapMode = WrapWordsOrAnywhere (not supported)
D* file dialog: disable path prefix stripping without changing start dir

fixed bugs
 * retore geometry doesn't grab the current selected geometry
 * history save bug with newline prefix
d* log window needs a threshold LogBatchLines = 5?
 * tooltips on buttons --> command
D* change pick file behavior (without conditions here)
 *   if prefix starts with / and contains no * treat as intial cwd and strip
D*   if it ends in / select dirs only??
 n   maybe output dir/{} syntax (this is just too clever for its own good)
 * add tooltips to favarites editor command
 * scroll job manager to bottom on new job?
 * qtail main window doesn't autoresize even when it has horiz scrollbar
 * small output size not set at start if not visible
